using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DapperHelper
{
	class FacadeHelper
	{
		private MetaInfo meta;
		private string _namespace;
		public string _tableName;

		public FacadeHelper(MetaInfo meta, string codeNamespace)
		{
			this.meta = meta;
			this._namespace = codeNamespace;
			_tableName = meta.TableName;
		}

		internal string CreateFacade()
		{
			var usens = "System.Data.SqlClient";
			var connClass = "SqlConnection";
			if (SimpleCRUD.sqlType == SqlType.MySQL)
			{
				usens = "MySql.Data.MySqlClient";
				connClass = "MySqlConnection";
			}

			string result = $@"
//////////////////////////////////////////////////////////////////
// auto generated by DapperHelper, DON'T modify it
//////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using {usens};
using System.Configuration;
using Dapper;

namespace {_namespace}.Facade
{{
	public partial class {_tableName}
	{{
		private static string connStr = ConfigurationManager.ConnectionStrings[""{_namespace}""].ConnectionString;

		public static void insert({_tableName} unit)
		{{ 
			using ({connClass} conn = new {connClass}(connStr)) 
			{{ 
				SqlMapper.Execute(conn, {_namespace}.SQL.{_tableName}.insert, unit); 
			}}
		}} 

		public static void update({_tableName} unit)
		{{ 
			using ({connClass} conn = new {connClass}(connStr)) 
			{{ 
				SqlMapper.Execute(conn, {_namespace}.SQL.{_tableName}.update, unit); 
			}}
		}} 

		public static List<{_namespace}.{_tableName}> select()
		{{ 
			using ({connClass} conn = new {connClass}(connStr)) 
			{{ 
				return SqlMapper.Query<{_namespace}.{_tableName}>(conn, {_namespace}.SQL.{_tableName}.select).AsList(); 
			}}
		}}

		public static int count()
		{{ 
			using ({connClass} conn = new {connClass}(connStr)) 
			{{ 
				return SqlMapper.ExecuteScalar<int>(conn, {_namespace}.SQL.{_tableName}.count); 
			}}
		}} 

		public static void delete({GetParamStr()})
		{{ 
			using ({connClass} conn = new {connClass}(connStr)) 
			{{ 
				SqlMapper.Execute(conn, {_namespace}.SQL.{_tableName}.delete, {GetParamModel()} ); 
			}}
		}} 

		public static {_namespace}.{_tableName} getModel({GetParamStr()})
		{{ 
			using ({connClass} conn = new {connClass}(connStr)) 
			{{ 
				return SqlMapper.QueryFirst<{_namespace}.{_tableName}>(conn, {_namespace}.SQL.{_tableName}.getModel, {GetParamModel()}); }}
		}} 

		public static void insertOrUpdate({_tableName} unit)
		{{ 
			using ({connClass} conn = new {connClass}(connStr)) 
			{{ 
				SqlMapper.Execute(conn, {_namespace}.SQL.{_tableName}.insertOrUpdate, unit); 
			}}
		}}

	}} //end of class
}} //end of namespace

";

			return result;
		}

		/// <summary>
		/// 基于主键信息生成 “函数输入参数”
		/// </summary>
		/// <returns></returns>
		protected string GetParamStr()
		{
			StringBuilder paramStr = new StringBuilder();

			var ttt = from p in meta.columns orderby p.name select p;
			var ay = ttt.ToList();
			for (int i = 0; i < ay.Count; i++)
			{
				var col = ay[i];
				if (col.is_primeKey)
				{
					paramStr.AppendFormat($"{col.csType} {col.name},");
				}
			}

			string ret = paramStr.ToString().TrimEnd(',');
			return ret;
		}

		/// <summary>
		/// 基于主键信息生成 “匿名对象”
		/// </summary>
		/// <returns></returns>
		protected string GetParamModel()
		{
			StringBuilder paramStr = new StringBuilder();

			var ttt = from p in meta.columns orderby p.name select p;
			var ay = ttt.ToList();
			for (int i = 0; i < ay.Count; i++)
			{
				var col = ay[i];
				if (col.is_primeKey)
				{
					paramStr.AppendFormat($"{col.name} = {col.name},");
				}
			}

			string ret = paramStr.ToString().TrimEnd(',');
			ret = $" new {{ {ret} }} ";
			return ret;
		}	}
}
