using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DapperHelper
{
	class FacadeHelper
	{
		private string _connectionString;
		private MetaInfo meta;
		private string _namespace;
		public string _tableName;

		public FacadeHelper(string connectionString, MetaInfo meta, string codeNamespace)
		{
			this._connectionString = connectionString;
			this.meta = meta;
			this._namespace = codeNamespace;
			_tableName = meta.TableName;
		}

		internal string CreateFacade()
		{
			StringBuilder sb = new StringBuilder();

			//head
			sb.AppendFormat("\r\n");
			sb.AppendFormat("//////////////////////////////////////////////////////////////////\r\n");
			sb.AppendFormat("// auto generated by DapperHelper, DON'T modify it\r\n");
			sb.AppendFormat("//////////////////////////////////////////////////////////////////\r\n");
			sb.AppendFormat("\r\n");
			sb.AppendFormat("using System;\r\n");
			sb.AppendFormat("using System.Collections.Generic;\r\n");
			sb.AppendFormat("using System.Data.SqlClient;\r\n");
			sb.AppendFormat("using System.Configuration;;\r\n");
			sb.AppendFormat("using Dapper;\r\n");
			sb.AppendFormat("\r\n");
			sb.AppendFormat("namespace {0}.Facade\r\n", _namespace);
			sb.AppendFormat("{{\r\n");
			sb.AppendFormat("\tpublic partial class {0}\r\n", _tableName);
			sb.AppendFormat("\t{{\r\n");

			//body
			sb.Append($"\t\tprivate static string connStr = ConfigurationManager.ConnectionStrings[\"{_namespace}\"].ConnectionString;\r\n");
			sb.Append($"\t\tpublic static void insert({_tableName} unit)\r\n\t\t{{ \r\n\t\t\tusing (SqlConnection conn = new SqlConnection(connStr)) {{ SqlMapper.Execute(conn, {_namespace}.SQL.{_tableName}.insert, unit); }}\r\n\t\t}} \r\n");
			sb.Append($"\t\tpublic static void update({_tableName} unit)\r\n\t\t{{ \r\n\t\t\tusing (SqlConnection conn = new SqlConnection(connStr)) {{ SqlMapper.Execute(conn, {_namespace}.SQL.{_tableName}.update, unit); }}\r\n\t\t}} \r\n");
			sb.Append($"\t\tpublic static List<{_namespace}.{_tableName}> select()\r\n\t\t{{ \r\n\t\t\tusing (SqlConnection conn = new SqlConnection(connStr)) {{ return SqlMapper.Query<{_namespace}.{_tableName}>(conn, {_namespace}.SQL.{_tableName}.select).AsList(); }}\r\n\t\t}}\r\n");
			sb.Append($"\t\tpublic static int count()\r\n\t\t{{ \r\n\t\t\tusing (SqlConnection conn = new SqlConnection(connStr)) {{ return SqlMapper.ExecuteScalar<int>(conn, {_namespace}.SQL.{_tableName}.count); }}\r\n\t\t}}\r\n");
			sb.Append($"\t\tpublic static void delete({GetParamStr()})\r\n\t\t{{ \r\n\t\t\tusing (SqlConnection conn = new SqlConnection(connStr)) {{ SqlMapper.Execute(conn, {_namespace}.SQL.{_tableName}.delete, {GetParamModel()} ); }}\r\n\t\t}} \r\n");
			sb.Append($"\t\tpublic static {_namespace}.{_tableName} getModel({GetParamStr()})\r\n\t\t{{ \r\n\t\t\tusing (SqlConnection conn = new SqlConnection(connStr)) {{ return SqlMapper.QueryFirst<{_namespace}.{_tableName}>(conn, {_namespace}.SQL.{_tableName}.getModel, {GetParamModel()}); }}\r\n\t\t}} \r\n");
			sb.Append($"\t\tpublic static void insertOrUpdate({_tableName} unit)\r\n\t\t{{ \r\n\t\t\tusing (SqlConnection conn = new SqlConnection(connStr)) {{ SqlMapper.Execute(conn, {_namespace}.SQL.{_tableName}.insertOrUpdate, unit); }}\r\n\t\t}} \r\n");

			//tail
			sb.Append("\t} //end of class\r\n");
			sb.Append("} //end of namespace\r\n");

			return sb.ToString();
		}

		/// <summary>
		/// 基于主键信息生成 “函数输入参数”
		/// </summary>
		/// <returns></returns>
		protected string GetParamStr()
		{
			StringBuilder paramStr = new StringBuilder();

			var ttt = from p in meta.columns orderby p.name select p;
			var ay = ttt.ToList();
			for (int i = 0; i < ay.Count; i++)
			{
				var col = ay[i];
				if (col.is_primeKey)
				{
					paramStr.AppendFormat($"{col.csType} {col.name},");
				}
			}

			string ret = paramStr.ToString().TrimEnd(',');
			return ret;
		}

		/// <summary>
		/// 基于主键信息生成 “匿名对象”
		/// </summary>
		/// <returns></returns>
		protected string GetParamModel()
		{
			StringBuilder paramStr = new StringBuilder();

			var ttt = from p in meta.columns orderby p.name select p;
			var ay = ttt.ToList();
			for (int i = 0; i < ay.Count; i++)
			{
				var col = ay[i];
				if (col.is_primeKey)
				{
					paramStr.AppendFormat($"{col.name} = {col.name},");
				}
			}

			string ret = paramStr.ToString().TrimEnd(',');
			ret = $" new {{ {ret} }} ";
			return ret;
		}	}
}
